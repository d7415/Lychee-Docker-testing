name: Upload PR image to Docker Hub

on:
  workflow_run:
    workflows: ["Build Pull Request"]
    types:
      - completed

env:
  PUID: '1000'
  PGID: '1000'
  PHP_TZ: 'UTC'

jobs:
  upload:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - 
        name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "artifact"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/artifact.zip', Buffer.from(download.data));
      - 
        name: "Unzip"
        run: unzip artifact.zip
      - 
        name: "Import image"
        run: docker image import ./artifact/lychee.tar lycheeorg/lychee:testing-${{ github.event.workflow_run.id }}
      -
        name: Push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            lycheeorg/lychee:testing-${{ github.run_id }}


  default-env:
    needs: upload
    runs-on: ubuntu-latest
    services:
      lychee-docker:
        image: lycheeorg/lychee:testing-${{ github.run_id }}
        ports:
          - 80:80
    steps:
      -
        name: GET
        run: 'curl -sSw "%{stderr}%{http_code}" http://localhost/ > /dev/null && curl -f http://localhost/'

  sqlite:
    needs: upload
    runs-on: ubuntu-latest
    services:
      lychee-docker:
        image: lycheeorg/lychee:testing-${{ github.run_id }}
        ports:
          - 80:80
    env:
      DB_CONNECTION: sqlite
    steps:
      -
        name: GET
        run: 'curl -sSw "%{stderr}%{http_code}" http://localhost/ > /dev/null && curl -f http://localhost/'

  sqlite2:
    needs: upload
    runs-on: ubuntu-latest
    services:
      lychee-docker:
        image: lycheeorg/lychee:testing-${{ github.run_id }}
        ports:
          - 80:80
    env:
      DB_CONNECTION: sqlite
      DB_DATABASE: '/var/www/html/Lychee/nonexistent'
    steps:
      -
        name: GET
        run: 'curl -sSw "%{stderr}%{http_code}" http://localhost/ > /dev/null && curl -f http://localhost/'

  mysql:
    needs: upload
    runs-on: ubuntu-latest
    services:
      lychee-docker:
        image: lycheeorg/lychee:testing-${{ github.run_id }}
        ports:
          - 80:80
      db:
        image: mariadb:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: lychee
    env:
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: '3306'
      DB_DATABASE: lychee
      DB_USERNAME: root
      DB_PASSWORD: password
    steps:
      -
        name: GET
        run: 'curl -sSw "%{stderr}%{http_code}" http://localhost/ > /dev/null && curl -f http://localhost/'

  postgres:
    needs: upload
    runs-on: ubuntu-latest
    services:
      lychee-docker:
        image: lycheeorg/lychee:testing-${{ github.run_id }}
        ports:
          - 80:80
      db:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: lychee
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: '5432'
      DB_DATABASE: lychee
      DB_USERNAME: postgres
      DB_PASSWORD: password
    steps:
      -
        name: GET
        run: 'curl -sSw "%{stderr}%{http_code}" http://localhost/ > /dev/null && curl -f http://localhost/'

  docker-compose:
    needs: upload
    runs-on: ubuntu-latest
    services:
      lychee-docker:
        image: lycheeorg/lychee:testing-${{ github.run_id }}
        ports:
          - 80:80
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set Password
        run: "sed -i 's/<.*_PASSWORD>/password/g' docker-compose.yml"
      -
        name: Set Image
        run: "sed -i 's|image: lycheeorg/lychee|image: lycheeorg/lychee:testing-${{ github.run_id }}|' docker-compose.yml"
      -
        name: Install docker-compose
        run: "sudo apt install docker-compose"
      -
        name: Run docker-compose
        run: 'docker-compose up -d && sleep 45 && docker-compose ps && curl -sSw "%{stderr}%{http_code}" http://localhost:90/ > /dev/null && curl -f http://localhost:90/'

  retag:
    needs: [default-env, sqlite, sqlite2, mysql, postgres, docker-compose]
    runs-on: ubuntu-latest
    container:
      image: gcr.io/go-containerregistry/crane:debug
    steps:
      -
        name: Retag image
        run: |
          crane auth login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} index.docker.io
          crane tag lycheeorg/lychee:testing-${{ github.event.workflow_run.id }} testing-pull${{ github.event.pull_request.number }}
